!/bin/bash
sudo apt update
sudo apt install tree
sudo apt install git -y
sudo apt install -y software-properties-common
sudo add-apt-repository --yes --update ppa:ansible/ansible
sudo apt install -y ansible
sudo apt install nginx -y
sudo apt install openjdk-17-jdk
sudo wget -O /etc/apt/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/etc/apt/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins


Command Line Arguments in Bash

Command line arguments in Bash scripts are accessed using special variables:

. $1 represents the first argument passed to the script.
. s@ is an array-like construct that holds all command line arguments.
$# gives the number of command line arguments passed.
$? contains the exit status of the last executed command.

.

.


for i in {1..3}
do
        mkdir -p "folder$i"
		touch "file$i"

done

for j in folder1 folder2 folder3
do 

cd "$j" || exit 1 

for i in {1..3}
do
        mkdir -p "folder$i"

for h in {1..3}
do touch "file$h"
done

		
done
cd ..

done





for parent in folder*
do
    if [ -d "$parent" ]; then  # make sure it's a directory
        cd "$parent" || exit 1
        for i in {1..3}
        do
            mkdir -p "folder$i"
        done
        cd ..
    fi
done



#!/bin/bash
find /opt -type f -newer /bin/bash | while read -r file; do
    name=$(basename "$file")
    size=$(stat -c%s "$file")
    mod=$(stat -c%y "$file")
    echo -e "$name\t$size\t$mod"
done | sort -k2 -nr






#!/bin/bash

echo "enter a number and string"

read a
read b

if [[ $a -gt 5 && $b == *str* ]]
then
        echo "number greater than 5 and sting"
else
        echo "not it is"

fi

file=/opt/file1

if [ -f $file ]
then
echo "file present"
#!/bin/bash

echo "enter a number and string"

read a
read b

if [[ $a -gt 5 && $b == *str* ]]
then
        echo "number greater than 5 and sting"
else
        echo "not it is"

fi

file=/opt/file1

if [ -f $file ]
then
echo "file present"




root@ip-172-31-33-215:/avi# cat new.sh
#!/bin/bash

curr=$(pwd)

for i in "$curr"/*
do
        if [ -f $i ]

        then
                lines=$(grep -c  "^$" "$i")
                totalline=$(wc -l <  "$i")
                echo "$i has $lines blank lines and has totallines $totalline"
                chaline=$((totalline - lines))
                echo "and has $chaline"
        fi
done



root@ip-172-31-33-215:/avi# 

#!/bin/bash

#cd=#(pwd)

find . -type f | while read -r lines; do
var=$(wc -m < $lines)
var2=$(wc -l < $lines)
var3=$(basename "$lines")
echo " So the file:$var3 has $var2 lines and $var words " 

done



countfile=0
countdir=0

for i in "$b"*
do
if [ -f "$i" ]
then
        ((countfile++))
fi
if [ -d "$i" ]
then
((countdir++))
fi
done

echo "$countdir"
echo "$countfile"



#!/bin/bash

funtion (){

        up=$(uptime -p | cut -c4- )
        since=$(uptime -s)
        cat  << abc
-------------------------------
###############################
This system is up of ${up}
This system is up from ${since}
--------------------------------
###############################
abc
}
funtion



#!/bin/bash

Countfile=0
countdict=0

for i in /opt/*
do
if [ -f "$i" ]
then
((Countfile ++))
fi
if [ -d "$i" ]
then
((countdict ++))
fi
done
echo " The count of files in $(pwd) is $Countfile  and count directory in $(pwd) is $countdict "
